import { useRef, useCallback } from 'react';
import logger from '../utils/logger';

type CallbackFunction = () => void | Promise<void>;

/**
 * Hook para gerenciar callbacks de etapas em um wizard
 * Usa useRef para evitar re-renderiza√ß√µes desnecess√°rias
 */
export function useStepCallbacks() {
  // Ref para armazenar callbacks sem causar re-renderiza√ß√µes
  const stepCallbacks = useRef<Record<string, CallbackFunction | null>>({});
  // Ref para controlar se o callback j√° foi registrado
  const registeredSteps = useRef<Set<string>>(new Set());
  
  // Fun√ß√£o est√°vel para registrar um callback para uma etapa
  const registerCallback = useCallback((stepId: string, callback: CallbackFunction) => {
    logger.info(`üîß [DEBUG] useStepCallbacks.registerCallback chamado para etapa: ${stepId}`);
    logger.info(`üîß [DEBUG] Callback fornecido:`, typeof callback);
    logger.info(`üîß [DEBUG] Etapa j√° registrada?`, registeredSteps.current.has(stepId));
    
    // Evitar registro duplicado
    if (registeredSteps.current.has(stepId)) {
      logger.warn(`‚ö†Ô∏è [DEBUG] Etapa ${stepId} j√° registrada, ignorando registro duplicado`);
      return;
    }
    
    logger.info(`üìù [DEBUG] Registrando callback para etapa: ${stepId}`);
    stepCallbacks.current = {
      ...stepCallbacks.current,
      [stepId]: callback
    };
    registeredSteps.current.add(stepId);
    
    logger.info(`‚úÖ [DEBUG] Callback registrado com sucesso para etapa: ${stepId}`);
    logger.info(`üìä [DEBUG] Total de etapas registradas:`, registeredSteps.current.size);
    logger.info(`üìä [DEBUG] Etapas registradas:`, Array.from(registeredSteps.current));
    logger.info(`üìä [DEBUG] Callbacks atuais:`, Object.keys(stepCallbacks.current));
  }, []);
  
  // Fun√ß√£o est√°vel para executar o callback de uma etapa
  const executeCallback = useCallback((stepId: string) => {
    logger.info(`üéØ [DEBUG] useStepCallbacks.executeCallback chamado para etapa: ${stepId}`);
    logger.info(`üéØ [DEBUG] Etapa registrada?`, registeredSteps.current.has(stepId));
    logger.info(`üéØ [DEBUG] Callback existe?`, !!stepCallbacks.current[stepId]);
    logger.info(`üéØ [DEBUG] Callback armazenado:`, stepCallbacks.current[stepId]);
    
    const callback = stepCallbacks.current[stepId];
    if (callback) {
      logger.info(`üöÄ [DEBUG] Executando callback da etapa: ${stepId}`);
      logger.info(`üöÄ [DEBUG] Tipo do callback:`, typeof callback);
      logger.info(`üöÄ [DEBUG] Callback √© fun√ß√£o?`, typeof callback === 'function');
      
      try {
        const result = callback();
        logger.info(`‚úÖ [DEBUG] Callback da etapa ${stepId} executado com sucesso`);
        logger.info(`‚úÖ [DEBUG] Resultado do callback:`, result);
      } catch (error) {
        logger.error(`‚ùå [DEBUG] Erro ao executar callback da etapa ${stepId}:`, error);
      }
    } else {
      logger.warn(`‚ö†Ô∏è [DEBUG] Nenhum callback encontrado para etapa: ${stepId}`);
      logger.warn(`‚ö†Ô∏è [DEBUG] Etapas registradas:`, Array.from(registeredSteps.current));
      logger.warn(`‚ö†Ô∏è [DEBUG] Callbacks dispon√≠veis:`, Object.keys(stepCallbacks.current));
    }
  }, []);
  
  // Fun√ß√£o para verificar se uma etapa tem callback registrado
  const hasCallback = useCallback((stepId: string): boolean => {
    return !!stepCallbacks.current[stepId];
  }, []);
  
  // Fun√ß√£o para limpar todos os callbacks
  const clearCallbacks = useCallback(() => {
    stepCallbacks.current = {};
    registeredSteps.current.clear();
  }, []);
  
  // Retorna as fun√ß√µes e o ref (caso seja necess√°rio acesso direto)
  return {
    registerCallback,
    executeCallback,
    hasCallback,
    clearCallbacks,
    stepCallbacks
  };
}
